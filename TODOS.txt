2. Implement remaining dotnet commands. --> https://learn.microsoft.com/en-us/dotnet/core/tools/
3. Once finished, re-tag the containers.
4. Give support for newer versions.
5. Think about an alternative for windows that doesn't require using a bash shell.
6. Try this (Perplexity "state of art"):
========================================
Developing .NET applications without installing the SDK or runtime locally is achievable using Docker, and several established patterns exist. Here's an overview of current approaches and opportunities for innovation:

Existing Docker-Centric Workflows
Multi-Stage Docker Builds
Microsoft's official .NET Docker images enable development through containerized SDKs. A typical workflow:

Use mcr.microsoft.com/dotnet/sdk for building/testing in one image stage

Copy artifacts to a final mcr.microsoft.com/dotnet/runtime or ASP.NET image
Example Dockerfile snippet:

text
FROM mcr.microsoft.com/dotnet/sdk:9.0 AS build
WORKDIR /app
COPY . .
RUN dotnet publish -o out

FROM mcr.microsoft.com/dotnet/runtime:9.0
COPY --from=build /app/out .
ENTRYPOINT ["dotnet", "app.dll"]
This allows full development cycles (build/debug/test) without local SDK installations
=======================================
To execute .NET SDK commands without local installations, existing Docker-based solutions use containerized SDK environments 
through these methods:

1. Interactive SDK Containers
Developers run ad-hoc commands in temporary containers with mounted source code:

bash
docker run -v $(pwd):/app -it mcr.microsoft.com/dotnet/sdk:9.0 bash
Inside the container:

bash
dotnet new webapi -o MyProject  # Scaffold projects [1][4]
dotnet user-secrets init        # Configure secrets [2]
dotnet add package Newtonsoft.Json  # Manage packages [1]
=======================================
Key Limitations
Ephemeral Containers: Changes outside mounted directories are lost when containers exit

Performance Overhead: File syncing between host/container adds latency for large projects

Debug Complexity: Requires IDE extensions for breakpoints/watch windows

Your project could innovate by simplifying these workflowsâ€”e.g., persistent SDK containers with automatic file synchronization or 
CLI wrappers that abstract Docker commands (mytool new webapi instead of raw docker run)